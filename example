#!/usr/bin/env python3 -u

# SPDX-FileCopyrightText: The vmnet-helper authors
# SPDX-License-Identifier: Apache-2.0

"""
Run a vm with vmnet-helper.
"""

import argparse
import os
import signal
import sys

import vmnet

VMNET_OFFLOAD_AUTO = {
    "vfkit": "off",
    "krunkit": "off",
    "qemu": "off",
}


def main():
    shared_interfaces = vmnet.shared_interfaces()
    p = argparse.ArgumentParser(description="Run virtual machine using vmnet-helper")

    # Main arguments

    p.add_argument("vm_name", help="VM name")
    p.add_argument(
        "--connection",
        choices=["fd", "socket", "client"],
        default="fd",
        help="How to connect the helper and vm (fd)",
    )

    # Helper arguments

    p.add_argument(
        "--operation-mode",
        choices=vmnet.OPERATION_MODES,
        default=vmnet.OPERATION_MODES[0],
        help=f"vmnet operation mode ({vmnet.OPERATION_MODES[0]})",
    )
    p.add_argument(
        "--start-address",
        help=(
            "The starting IPv4 address (string) to use for the interface. This "
            "address is used as the gateway address. The subsequent address up "
            "to and including --end-address_key are placed in the DHCP pool. All "
            "other addresses are available for static assignment. "
            "The address must be in the private IP range (RFC 1918)."
        ),
    )
    p.add_argument(
        "--end-address",
        help=(
            "The DHCP IPv4 range end address (string) to use for the interface. "
            "The address must be in the private IP range (RFC 1918)."
        ),
    )
    p.add_argument(
        "--subnet-mask", help="The IPv4 subnet mask (string) to use on the interface."
    )
    p.add_argument(
        "--shared-interface",
        choices=shared_interfaces,
        default=shared_interfaces[0],
        help=f"vmnet shared interface for --operation-mode=bridged ({shared_interfaces[0]})",
    )
    p.add_argument(
        "--enable-isolation",
        action="store_true",
        help="Isolate the guest from other guests on the vmnet interface, requires --operation-mode=host",
    )
    p.add_argument(
        "--enable-offloading",
        action="store_true",
        help="Enable vmnet tso and checksum-offload options (krunkit driver only)",
    )

    # VM arguments

    p.add_argument(
        "--driver",
        metavar="NAME",
        choices=vmnet.DRIVERS,
        default=vmnet.DRIVERS[0],
        help=f"VM driver ({vmnet.DRIVERS[0]})",
    )
    p.add_argument(
        "--driver-command",
        metavar="COMMAND",
        help=f"Use custom driver command",
    )
    p.add_argument(
        "--cpus",
        metavar="N",
        type=cpus,
        default=1,
        help="Number of vpus (1)",
    )
    p.add_argument(
        "--memory",
        metavar="M",
        type=int,
        default=1024,
        help="Memory size in MiB (1024)",
    )
    p.add_argument(
        "--timeout",
        metavar="SECONDS",
        type=int,
        default=60,
        help="Time to wait for VM IP address (60 seconds)",
    )

    distros = list(vmnet.IMAGES.keys())
    p.add_argument(
        "--distro",
        metavar="NAME",
        choices=distros,
        default=distros[0],
        help=f"Linux distro ({distros[0]})",
    )

    # Debugging

    p.add_argument("-v", "--verbose", action="store_true", help="Be more verbose")

    args = p.parse_args()

    if args.operation_mode == "bridged" and not args.shared_interface:
        p.error("--shared-interface required for --operation-mode=bridged")

    if args.enable_isolation and args.operation_mode != "host":
        p.error("--enable-isolation requires --operation-mode=host")

    if args.connection == "client":
        if args.driver == "krunkit":
            p.error("--driver=krunkit not supported with --connection=client")
        if args.enable_offloading:
            p.error("--enable-offloading not supported with --connection=client")

    signal.signal(signal.SIGTERM, terminate)
    signal.signal(signal.SIGINT, terminate)

    if args.connection == "fd":
        run_with_fd(args)
    elif args.connection == "socket":
        run_with_socket(args)
    elif args.connection == "client":
        run_with_client(args)


def run_with_fd(args):
    """
    Use file descriptor passing to connect the vm and the helper.
    """
    # Create a socketpair for the child processes. The vm_sock will be used by
    # the vm, and the host_sock will be used by the helper.
    vm_sock, helper_sock = vmnet.socketpair()

    # Start vmnet-helper first, since we need the MAC address before starting
    # the VM.
    helper = vmnet.Helper(args, fd=helper_sock.fileno())
    helper.start()
    try:
        # Start the VM with the MAC address and the second socket.
        vm = vmnet.VM(args, helper.interface["vmnet_mac_address"], fd=vm_sock.fileno())
        vm.start()
        try:
            vm.wait_for_ip_address(timeout=args.timeout)
            os.wait()
        finally:
            vm.stop()
    finally:
        helper.stop()


def run_with_socket(args):
    """
    Use unix socket to connect the vm and the helper.
    """
    # The helper will create a unix datagram socket at this path and wait for
    # client connection.
    socket = vmnet.vm_path(args.vm_name, "vmnet.sock")

    # Start vmnet-helper first, since we need the MAC address before starting
    # the VM.
    helper = vmnet.Helper(args, socket=socket)
    helper.start()
    try:
        # Start the VM with the MAC address and the socket path.
        vm = vmnet.VM(args, helper.interface["vmnet_mac_address"], socket=socket)
        vm.start()
        try:
            vm.wait_for_ip_address(timeout=args.timeout)
            os.wait()
        finally:
            vm.stop()
    finally:
        helper.stop()


def run_with_client(args):
    """
    Use vmnet-client to run a vm with fd.
    """
    vm = vmnet.VM(args, vmnet.random_mac_address(), fd=4, client=vmnet.CLIENT)
    vm.start()
    try:
        vm.wait_for_ip_address(timeout=args.timeout)
        os.wait()
    finally:
        vm.stop()


def cpus(s):
    n = int(s)
    if n < 1:
        raise ValueError(f"Invalid number of cpus: '{s}'")
    return n


def terminate(signo, frame):
    sys.exit(1)


if __name__ == "__main__":
    main()
